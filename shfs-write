#!/bin/bash

this_script="$(realpath -- "${BASH_SOURCE[0]}")"
program_dir="$(dirname -- "$this_script")"
progname="$(basename -- "${BASH_SOURCE[0]}")"
if [ -z "$progname" ]
then
    progname="shfs-write"
fi

usage() {
    cat >&2 <<EOF
usage: $progname [options] FS FILE DEST
   or: $progname [options] FS DEST

Write FILE to DEST on FS.
In the second form, read from stdin, writing to DEST on FS.

options:
    FS            the shfs filesystem file
    FILE          the file to write to shfs
    DEST          the name of the file to write
    -h, --help    print this usage and exit

If FILE is not specified or if file is -, use stdin.
Warning: the input file will be silently truncated to the file block size of the filesystem.
EOF
}

source "${program_dir}/libshfs"
set -eu

if [ "$#" = 0 ]
then
    usage
    exit 1
fi

for arg in "$@"
do
    case "$arg" in
        -h|--help) usage; exit 0;;
        *) ;;
    esac
done

for arg in "$@"
do
    case "$arg" in
        -*) eecho "No such option $arg"; exit 1;;
        *) ;;
    esac
done

filesystem=
in_file=
out_file=

if [ "$#" = 2 ]
then
    filesystem="$1"
    in_file=/dev/stdin
    out_file="$2"
elif [ "$#" = 3 ]
then
    filesystem="$1"
    in_file="$2"
    out_file="$3"
else
    eecho "Invalid arguments"
    usage
    exit 1
fi

if [[ "$out_file" =~ / ]]
then
    eecho "error: invalid file name"
    exit 1
fi

# Steps for writing:
#   1. Find where to write. If the file exists, overwrite; otherwise, create.
#   2. Seek to that inode's block start
#   3. Write data
#   4. Write permissions/user/group if applicable
#   5. Set file name (if file created)
#   6. Update modification time

# Try to overwrite a file we currently have
inode_num="$(find_file "$filesystem" "$out_file")"
if [ -n "$inode_num" ]
then
    if ! can_access "$filesystem" "$inode_num" w
    then
        eecho "error: insufficient permissions for $out_file"
        exit 2
    fi
else
    inode_num="$(get_first_free_inode "$filesystem")"
    if [ "$?" = 2 ] || [ -z "$inode_num" ]
    then
        eecho "error: no space left on device"
        exit 2
    fi

    set_file_name "$filesystem" "$inode_num" "$out_file"
    set_file_owner "$filesystem" "$inode_num" "$(id -u)"
    set_file_group "$filesystem" "$inode_num" "$(id -g)"
    # Don't specify permissions for default
    set_permissions "$filesystem" "$inode_num"
fi

# Actually write the data to "disk"
file_data_block_start="$(get_data_start_for_inode "$filesystem" "$inode_num")"
bytes_copied="$(dd of="$filesystem" if="$in_file" bs=1 count="$(get_file_block_size "$filesystem")" seek="$file_data_block_start" conv=sparse,notrunc 2>&1 | grep -e 'copied,' | cut -d ' ' -f 1)"

set_file_length "$filesystem" "$inode_num" "$bytes_copied"
