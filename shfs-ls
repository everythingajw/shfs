#!/bin/bash

this_script="$(realpath -- "${BASH_SOURCE[0]}")"
program_dir="$(dirname -- "$this_script")"
progname="$(basename -- "${BASH_SOURCE[0]}")"
if [ -z "$progname" ]
then
    progname="shfs-ls"
fi

usage() {
    cat >&2 <<EOF
usage: $progname FILESYSTEM [options]

List all contents of FILESYSTEM.

Options:
    -h, --help      Print this usage and exit
EOF
}

set -eu

source "${program_dir}/libshfs"

if [ "$#" = 0 ]
then
    usage
    exit 1
fi

for arg in "$@"
do
    case "$arg" in
        -h|--help) usage; exit 0;;
        *) ;;
    esac
done

filesystem="$1"

if [ -z "$filesystem" ] || [[ "$filesystem" =~ ^- ]]
then
    eecho "error: missing path to filesystem"
    exit 1
fi

fill_caches "$filesystem"

uid_to_name() {
    # ok to suppress a return value here, if it's blank we'll use the uid anyway
    local name="$(id -un -- "$1" 2>/dev/null)"
    printf "%s" "${name:-"$1"}"
}

gid_to_name() {
    # ok to suppress a return value here, if it's blank we'll use the uid anyway
    local name="$(id -gn -- "$1" 2>/dev/null)"
    printf "%s" "${name:-"$1"}"
}

ls_inode() {
    local inode_num="$1"
    
    # Test if this inode is allocated first. If not, don't bother doing all the work
    # to fetch file metadata - it's useless.
    local file_name
    file_name="$(get_file_name "$filesystem" "$inode_num")"
    if [ -z "$file_name" ]
    then
        return 0
    fi

    # I'll tabulate this some other time
    local owner
    owner="$(get_file_owner "$filesystem" "$inode_num")"
    local group
    group="$(get_file_group "$filesystem" "$inode_num")"
    local args=(
        "$inode_num"
        "$(get_permissions "$filesystem" "$inode_num")"
        "$(uid_to_name "$owner")"
        "$(gid_to_name "$group")"
        "$(get_file_length "$filesystem" "$inode_num")"
        "$(get_last_modified_timestamp "$filesystem" "$inode_num")"
        "$(get_file_name "$filesystem" "$inode_num")"
    )

    printf "%d %04o %s %s %4d %s %s\n" "${args[@]}"
    return 0
}

i=0
total_inodes="$(get_num_inodes "$filesystem")"
while [ "$i" -lt "$total_inodes" ]
do
    ls_inode "$((i + FIRST_INODE_NUMBER))"
    # echo "tic $CACHE"
    i="$((i + 1))"
done
